package model;

public class Utilities { // Version 1 Using For loop: This method is used when we don't know how many terms we will have and the user will determine the number of terms(n)
	public static String getSequence1a(int ft, int d, int n) {
		String result = "";
		
		int term = ft;
		result = "<";
		int sum = 0;
		
		for(int i = 1; i <= n; i ++) {
			result += term;
			if (i < n) { // not the last term
				result += ", ";
			}
			sum += term;
			term += d;
		}
		result += ">";
		result += " has average " + (sum / (double)n);
		
		return result;
	}

	public static String getSequence1b(int ft, int d, int n) {  //Version 2 Using While Loop: This method is used when we don't know how many terms we will have and the user will determine the number of terms(n)
		String result = "";
		
		int term = ft;
		result = "<";
		int sum = 0;
		
		int i = 1;
				
		while(i <= n) {
			result += term;
			if (i < n) { // not the last term
				result += ", ";
			}
			sum += term;
			term += d;
		}
		result += ">";
		result += " has average " + (sum / (double)n);
		i ++;
		
		return result;
	}
	
	public static String getSequence2a(int ft, int d, int max) { // Version 1 Using For Loop: This method is user to generate an arithmetic sequence till a maximum number generated by a user.
		String result = "";
		
		int term = ft;
		result = "<";
		int sum = 0;
		
		int i = 0;
				
		for(;term <= max;) { // exiting from the loop means: !(term <= max) is the case term > max
			result += term;
			i ++;
			result += " ";
			sum += term;
			term += d;
		}
		result += ">";
		result += " has average " + (sum / (double)i);
		
		
		return result;
	}
	
	public static String getSequence2b(int ft, int d, int max) { // Version 2 Using While Loop: This method is user to generate an arithmetic sequence till a maximum number generated by a user.
		String result = "";
		
		int term = ft;
		result = "<";
		int sum = 0;
		
		int i = 0;
				
		while(term <= max) { // existing from the loop means: !(term <= max) is the case term > max
			result += term;
			i ++;
			result += " ";
			sum += term;
			term += d;
		}
		result += ">";
		result += " has average " + (sum / (double)i);
		
		
		return result;
	}
	
	
}



